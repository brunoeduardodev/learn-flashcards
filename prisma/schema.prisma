// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    collections   Collection[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Collection {
    id   String @id @default(cuid())
    name String
    slug String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])

    decks  Deck[]
    userId String
}

model Deck {
    id   String @id @default(cuid())
    name String
    slug String

    collection Collection @relation(fields: [collectionId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    collectionId String
    cards        Card[]
}

model Card {
    id String @id @default(cuid())

    question String
    answer   String

    deck Deck @relation(fields: [deckId], references: [id])

    front CardContent @relation("CardFront", fields: [frontId], references: [id])
    back  CardContent @relation("CardBack", fields: [backId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    deckId  String
    frontId String @unique
    backId  String @unique
}

model CardContent {
    id String @id @default(cuid())

    question String
    image    String?

    frontCards Card? @relation("CardFront")
    backCards  Card? @relation("CardBack")
}
